# -*- coding: utf-8 -*-
"""Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10NPE16ux4mJG-_OLtgjmNtQ5HC-DApDT
"""

import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
import os
import time  # For adding delay between API calls

# Load environment variables from .env file
load_dotenv()
SERPAPI_KEY = os.getenv("SERPAPI_KEY", "a8e4a80274c90d68a580be4a12fa5a199d06ef1e2ea4b00d5ed6ec5f8e484b9d")

# Add a background image and set the page layout to wide
st.markdown(
    f"""
    <style>
        .stApp {{
            background-image: url("file://C:/Users/Ankan/OneDrive/Desktop/robo.jpg");
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            color: #ffffff;
        }}
        .header {{
            color: #89CFF0;
            font-size: 44px;
            font-weight: 600;
            text-align: center;
            margin-top: 20px;
            font-family: 'Segoe UI', sans-serif;
            text-shadow: 1px 1px 2px #333333;
        }}
        .subheader {{
            color: #D3D3D3;
            font-size: 20px;
            text-align: center;
            margin-bottom: 30px;
            font-family: 'Segoe UI', sans-serif;
            text-shadow: 1px 1px 2px #444444;
        }}
        .sidebar .sidebar-content {{
            background-color: #1A1A2E;
        }}
        .css-1r6slb0 p {{
            color: #E0FFFF;
            font-size: 18px;
        }}
        .css-1vbd788, .css-1vbd788 p {{
            color: #E0FFFF;
        }}
        .css-1d391kg {{
            color: #E0FFFF;
        }}
        .block-container {{
            background-color: rgba(26, 26, 46, 0.85);
            border-radius: 10px;
            padding: 20px;
        }}
        .stButton button {{
            background-color: #89CFF0;
            color: #1A1A2E;
            font-weight: bold;
            border-radius: 5px;
            padding: 8px 20px;
        }}
        .stButton button:hover {{
            background-color: #B0E0E6;
            color: #1A1A2E;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# Streamlit app configuration with a custom title style
st.markdown('<div class="header">ðŸ¤– AI Agent Information Retrieval</div>', unsafe_allow_html=True)
st.markdown('<div class="subheader">Upload your data to begin the journey of extracting valuable insights.</div>', unsafe_allow_html=True)

# File upload or Google Sheets input
uploaded_file = st.file_uploader("Upload a CSV file", type="csv")
google_sheets_url = st.text_input("Or, enter Google Sheets URL (public access)")

# Load data based on file upload or Google Sheets link
data = None
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
elif google_sheets_url:
    try:
        st.write("Loading data from Google Sheets...")
        sheet = pd.read_csv(google_sheets_url)  # Replace with actual Google Sheets code if needed
        data = sheet
    except Exception as e:
        st.error("Error loading Google Sheets data: " + str(e))

# Display data preview
if data is not None:
    st.write("### Data Preview")
    st.write(data.head())

    # Select main column for entity search
    column = st.selectbox("Select the main column for entity search", data.columns)

    # Query input
    query_template = st.text_input("Enter your query template (e.g., 'Find contact info for {company}')")

    # Process query
    if st.button("Run Query"):
        if query_template and column:
            results = []
            for entity in data[column]:
                # Replace placeholder with actual entity value
                query = query_template.replace("{company}", entity)

                # Example SerpAPI call with unique query for each entity
                try:
                    response = requests.get(
                        "https://serpapi.com/search",
                        params={
                            "q": query,
                            "api_key": SERPAPI_KEY,
                            "engine": "google"
                        }
                    )
                    result = response.json()
                    snippet = result.get("organic_results", [{}])[0].get("snippet", "No snippet available")
                    results.append({
                        "Entity": entity,
                        "Result": snippet
                    })
                except Exception as e:
                    st.error(f"Error fetching data for {entity}: {e}")
                    results.append({
                        "Entity": entity,
                        "Result": "Error"
                    })

                # Add a delay to avoid being rate-limited by the API
                time.sleep(1)

            # Display results
            result_df = pd.DataFrame(results)
            st.write("### Query Results")
            st.write(result_df)

            # Option to download results
            csv = result_df.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="Download Results as CSV",
                data=csv,
                file_name="results.csv",
                mime="text/csv",
            )
        else:
            st.error("Please enter a query template and select a column.")